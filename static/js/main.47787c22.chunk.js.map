{"version":3,"sources":["Task/Task.js","Column/Column.js","Create/Create.js","App.js","reportWebVitals.js","index.js"],"names":["Task","props","task","changeTaskStatus","changeTaskPriority","onTaskDelete","editTask","useState","isModalOpen","setIsModalOpen","isEditModalOpen","setIsEditModalOpen","name","newTask","setNewTask","taskDescription","newDescription","setNewDescription","className","Alert","color","priority","type","onClick","Modal","isOpen","ModalHeader","ModalBody","Input","value","onChange","e","target","aria-label","selected","ModalFooter","Button","id","status","Columns","tasks","Col","filter","el","sort","a","b","map","Create","addNewTask","isActiveCreateTaskForm","setIsActiveCreateTaskForm","isBtnActiveTskCreate","setIsBtnActiveTskCreate","taskInput","setTaskInput","taskDescriptionInput","setTaskDescriptionInput","taskReset","Form","placeholder","length","disabled","preventDefault","App","taskList","Math","random","setTasks","statuses","columnList","title","priorities","taskId","direction","updatedTask","indexOf","updatedTasks","console","log","class","newTasks","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47787c22.chunk.js","sourcesContent":["import '../App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './Task.css'\r\nimport React, {useState} from 'react';\r\nimport {Alert, Button, Input, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\r\nimport {BsTrash, MdModeEdit} from \"react-icons/all\";\r\n\r\n\r\n\r\nfunction Task(props) {\r\n\r\n    const {task, changeTaskStatus, changeTaskPriority, onTaskDelete, editTask} = props;\r\n\r\n    const alertColors = [\"danger\", \"warning\", \"primary\"];\r\n\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const [isEditModalOpen, setIsEditModalOpen] = useState(false)\r\n    const [newTask, setNewTask] = useState(task.name);\r\n    const [newDescription, setNewDescription] = useState(task.taskDescription);\r\n\r\n\r\n    const newTaskInputHandler = (e) => {\r\n        setNewTask(e.target.value)\r\n        // taskReset();\r\n    };\r\n\r\n    const newDescriptionInputHandler = (e) => {\r\n        setNewDescription(e.target.value)\r\n        // taskReset();\r\n    };\r\n\r\n    const saveBtnClick = () => {\r\n        editTask(task.id, newTask, newDescription)\r\n        setIsEditModalOpen(false);\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"container-fluid\">\r\n\r\n            {/*Cards*/}\r\n            <div className=\"card\">\r\n                <span className=\"card-header\">\r\n                    <Alert className=\"alert\" color=\"primary\"\r\n                           color={alertColors[task.priority]}>Priority:{task.priority}</Alert>\r\n                </span>\r\n\r\n                <div className=\"card-body\">\r\n                    <div>\r\n                        <h5 className=\"card-title\">{task.name}</h5>\r\n                        <p className=\"card-text\">{task.taskDescription}</p>\r\n                    </div>\r\n\r\n                    <hr/>\r\n\r\n\r\n                    <div className=\"trashIcon\" type=\"button\" onClick={() => setIsEditModalOpen(true)}><MdModeEdit/>\r\n                    </div>\r\n                    <Modal isOpen={isEditModalOpen}>\r\n                        <ModalHeader>Edit Task: </ModalHeader>\r\n                        <ModalBody>\r\n                            <Input className=\"mb-3\" type=\"text\" value={newTask} onChange={newTaskInputHandler}/>\r\n\r\n                            <Input className=\"mb-3\" type=\"text\" value={newDescription}\r\n                                   onChange={newDescriptionInputHandler}/>\r\n\r\n                            <select className=\"form-select\" aria-label=\"Default select example\">\r\n                                <option selected>Priority</option>\r\n                                <option value=\"0\">High</option>\r\n                                <option value=\"1\">Medium</option>\r\n                                <option value=\"2\">Low</option>\r\n                            </select>\r\n\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button className=\"ml-2\" color=\"primary\" onClick={saveBtnClick}>Save</Button>{' '}\r\n                            <Button color=\"secondary\" onClick={() => setIsEditModalOpen(false)}>Cancel</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n\r\n                    {/*//Modal to Delete*/}\r\n                    <div className=\"trashIcon ml-2\" type=\"button\" onClick={() => setIsModalOpen(true)}><BsTrash/></div>\r\n                    <Modal isOpen={isModalOpen}>\r\n                        <ModalHeader>Are you sure you want to delete?</ModalHeader>\r\n                        <ModalBody>\r\n                            <h5>{task.name}</h5>\r\n                            <p>{task.taskDescription}</p>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button className=\"ml-2\" color=\"primary\"\r\n                                    onClick={() => onTaskDelete(task.id)}>Delete</Button>{' '}\r\n                            <Button color=\"secondary\" onClick={() => setIsModalOpen(false)}>Cancel</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                </div>\r\n\r\n\r\n                <div className=\"card-footer\">\r\n\r\n                    <div className=\"left-right-Btn\">\r\n                        {task.status !== \"TO DO\" &&\r\n                        <button className=\"btn btn-outline-dark btn-sm\"\r\n                                onClick={() => changeTaskStatus(task.id, \"left\")}>←\r\n                        </button>\r\n                        }\r\n                        {task.status !== \"DONE\" &&\r\n                        <button className=\"btn btn-outline-dark btn-sm\"\r\n                                onClick={() => changeTaskStatus(task.id, \"right\")}>→\r\n                        </button>\r\n                        }\r\n                    </div>\r\n\r\n\r\n                    <div className=\"up-down-btn\">\r\n                        <button className=\"btn btn-outline-dark btn-sm \"\r\n                                onClick={() => changeTaskPriority(task.id, 'up')}>↑\r\n                        </button>\r\n\r\n                        <button className=\"btn btn-outline-dark btn-sm\"\r\n                                onClick={() => changeTaskPriority(task.id, 'down')}>↓\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Task;\r\n","import './Column.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Task from \"../Task/Task\";\r\nimport {Col} from \"reactstrap\";\r\n\r\nfunction Columns(props) {\r\n\r\n    const {tasks, status, changeTaskStatus, changeTaskPriority, onTaskDelete, editTask} = props;\r\n\r\n    return (\r\n        <div>\r\n            <Col className=\"column\">\r\n                <h5>{status}</h5>\r\n                {tasks.filter(el => el.status === status)\r\n                    .sort((a, b) => a.priority - b.priority)\r\n                    .map(el => <Task task={el}\r\n                                     key={el.id}\r\n                                     priority={el.priority}\r\n                                     changeTaskStatus={changeTaskStatus}\r\n                                     changeTaskPriority={changeTaskPriority}\r\n                                     onTaskDelete={onTaskDelete}\r\n                                     editTask={editTask}\r\n                    />)}\r\n            </Col>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Columns;\r\n","import \"./Create.css\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React, {useState} from 'react';\r\nimport {Form, Input} from \"reactstrap\";\r\n\r\n\r\nfunction Create(props) {\r\n\r\n    const {addNewTask, priority} = props;\r\n\r\n    const [isActiveCreateTaskForm, setIsActiveCreateTaskForm] = useState(false);\r\n    const [isBtnActiveTskCreate, setIsBtnActiveTskCreate] = useState(false);\r\n    const [taskInput, setTaskInput] = useState('')\r\n    const [taskDescriptionInput, setTaskDescriptionInput] = useState('')\r\n\r\n    const openCreateTskForm = () => {\r\n        setIsActiveCreateTaskForm(true)\r\n    };\r\n\r\n    const onTaskCreate = (e) => {\r\n        setIsBtnActiveTskCreate(e.target.value.length > 4);\r\n        setTaskInput(e.target.value);\r\n    };\r\n\r\n    const onTaskDescriptionCreate = (e) => {\r\n        setIsBtnActiveTskCreate(e.target.value.length > 4);\r\n        setTaskDescriptionInput(e.target.value);\r\n    };\r\n\r\n    const taskSubmit = (e) => {\r\n        e.preventDefault();\r\n        addNewTask(taskInput, taskDescriptionInput, priority)\r\n        taskReset();\r\n    };\r\n\r\n    const taskReset = () => {\r\n        setTaskInput('');\r\n        setIsActiveCreateTaskForm(false);\r\n        setIsBtnActiveTskCreate(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <Form className=\"create-inputs\">\r\n\r\n                {!isActiveCreateTaskForm &&\r\n                <button type=\"button\" className=\"btn btn-primary btn-create mb-3\" onClick={openCreateTskForm}>Create\r\n                    task\r\n                </button>\r\n                }\r\n\r\n                {isActiveCreateTaskForm &&\r\n                <form>\r\n\r\n                    <div className=\"input-group mb-3\">\r\n\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter task\"\r\n                               onChange={onTaskCreate}\r\n                               value={taskInput}/>\r\n                    </div>\r\n\r\n                    <div className=\"input-group mb-3\">\r\n\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter task description\"\r\n                               onChange={onTaskDescriptionCreate}\r\n                               value={taskDescriptionInput}/>\r\n                    </div>\r\n\r\n                    <div>\r\n\r\n                        <Input placeholder=\"Hello\" type=\"select\" className=\"mb-4\" onChange={priority}>\r\n                            <option value=\"0\">High</option>\r\n                            <option value=\"1\">Medium</option>\r\n                            <option value=\"2\">Low</option>\r\n\r\n                        </Input>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"create-btn\">\r\n                        <button type=\"submit\" className=\"btn btn-primary btn-submit\"\r\n                                disabled={!isBtnActiveTskCreate}\r\n                                onClick={taskSubmit}>Submit\r\n                        </button>\r\n\r\n                        <button className=\"btn btn-primary create-btn\"\r\n                                onClick={taskReset}>Cancel\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                }\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create;\r\n\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Columns from \"./Column/Column\";\nimport React, {useState} from 'react';\nimport {Row} from \"reactstrap\";\nimport Create from \"./Create/Create\";\n\nfunction App() {\n\n    const taskList = [\n        {\n            id: Math.random(),\n            name: \"First todo\",\n            priority: 0,\n            status: \"TO DO\",\n            taskDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam\"\n        },\n        {\n            id: Math.random(),\n            name: \"Third todo\",\n            priority: 2,\n            status: \"IN PROGRESS\",\n            taskDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam\"\n        },\n        {\n            id: Math.random(),\n            name: \"Second todo\",\n            priority: 1,\n            status: \"REVIEW\",\n            taskDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam\"\n        },\n        {\n            id: Math.random(),\n            name: \"Fourth todo\",\n            priority: 0,\n            status: \"DONE\",\n            taskDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam\"\n        },\n        {\n            id: Math.random(),\n            name: \"Fifth todo\",\n            priority: 1,\n            status: \"TO DO\",\n            taskDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam\"\n        },\n        {\n            id: Math.random(),\n            name: \"Sixth todo\",\n            priority: 1,\n            status: \"IN PROGRESS\",\n            taskDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam\"\n        }\n    ];\n\n    const [tasks, setTasks] = useState(taskList);\n\n    const statuses = [\"TO DO\", \"IN PROGRESS\", \"REVIEW\", \"DONE\"];\n\n    const columnList = [\n        {id: Math.random(), title: \"TO DO\", status: 'TO DO'},\n        {id: Math.random(), title: \"IN PROGRESS\", status: \"IN PROGRESS\"},\n        {id: Math.random(), title: \"REVIEW\", status: 'REVIEW'},\n        {id: Math.random(), title: \"DONE\", status: 'DONE'}\n    ]\n\n    const priorities = [0, 1, 2]\n\n    const changeTaskStatus = (taskId, direction) => {\n        const updatedTask = tasks.map(el => {\n            if (el.id === taskId) {\n                if (direction === 'right')\n                    el.status = statuses[statuses.indexOf(el.status) + 1];\n\n                if (direction === 'left')\n                    el.status = statuses[statuses.indexOf(el.status) - 1]\n            }\n            return el\n        });\n        setTasks(updatedTask);\n    };\n\n    const changeTaskPriority = (taskId, priority) => {\n        const updatedTasks = taskList.map(el => {\n            if (el.id === taskId) {\n                if (priority === \"up\")\n                    el.priority = priorities[priorities.indexOf(el.priority) - 1];\n\n                if (priority === \"down\")\n                    el.priority = priorities[priorities.indexOf(el.priority) + 1];\n\n            }\n\n            return el;\n        });\n        setTasks(updatedTasks)\n    }\n\n\n    const addNewTask = (newTask, taskDescriptionInput, priority) => {\n        const updatedTasks = {\n            id: Math.random(),\n            name: newTask,\n            priority: priority,\n            status: \"TO DO\",\n            taskDescription: taskDescriptionInput\n        }\n        const newTasks = [...tasks, updatedTasks];\n        setTasks(newTasks)\n    }\n\n    const onTaskDelete = (taskId) => {\n        console.log(taskId)\n        const updatedTasks = tasks.filter(el => el.id !== taskId)\n        setTasks(updatedTasks)\n    };\n\n    const editTask = (taskId, newTask, newDescription) => {\n        console.log(taskId, newTask)\n        const updatedTasks = tasks.map(el => {\n            if (el.id === taskId)\n                return {...el, name: newTask, taskDescription: newDescription}\n            return el\n        });\n        setTasks(updatedTasks)\n    };\n\n    return (\n        <div>\n            <h1 className=\"title\">Kanban</h1>\n\n\n            <div class=\"container-lg\">\n                <Create addNewTask={addNewTask}/>\n\n\n                <hr/>\n\n                <Row>\n                    {columnList.map(el => <Columns key={el.id}\n                                                   tasks={tasks}\n                                                   status={el.status}\n                                                   changeTaskStatus={changeTaskStatus}\n                                                   changeTaskPriority={changeTaskPriority}\n                                                   onTaskDelete={onTaskDelete}\n                                                   editTask={editTask}\n\n                    />)}\n\n\n                </Row>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}